import asyncio
import asyncpg
import os
from aiohttp import web
from dotenv import load_dotenv


from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram_dialog import setup_dialogs
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# from config import settings
from bot_dialogs import main_menu, faq, ask_a_lawyer, book_a_consultation
from bot_handlers import start_exit_menu, get_information_and_stat, admin_menu
from bot_middlewares.reg_middleware import DbSessionMiddleware

load_dotenv()

# async def create_pool():
#     return await asyncpg.create_pool(user=os.getenv('DB_USER'),
#                                      password=os.getenv('DB_PASSWORD'),
#                                      host=os.getenv('DB_HOST'),
#                                      port=os.getenv('DB_PORT'),
#                                      database=os.getenv('DATABASE'))
# #
# async def main() -> None:
#     bot = Bot(
#         token=os.getenv('BOT_TOKEN'),
#         default=DefaultBotProperties(parse_mode=ParseMode.HTML),
#     )
#     dp = Dispatcher(storage=MemoryStorage())
#
#     dp.include_router(admin_menu.router)
#     dp.include_router(start_exit_menu.router)
#     dp.include_router(get_information_and_stat.router)
#
#     dp.include_router(book_a_consultation.appointment_for_a_consultation_dialog)
#     dp.include_router(main_menu.main_menu_dialog)
#     dp.include_router(ask_a_lawyer.ask_lawyer_dialog)
#     dp.include_router(faq.faq_dialog)
#
#     setup_dialogs(dp)
#     pool_connect = await create_pool()
#     dp.update.middleware.register(DbSessionMiddleware(pool_connect))
#
#     await bot.delete_webhook(drop_pending_updates=True)
#     await dp.start_polling(bot)
#
#
# if __name__ == '__main__':
#     asyncio.run(main())


import asyncio
import asyncpg
import os
from aiohttp import web
from dotenv import \
    load_dotenv  # load_dotenv() –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
from urllib.parse import urlparse  # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ DATABASE_URL

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram_dialog import setup_dialogs
from aiogram.client.default import DefaultBotProperties
# from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —Å–≤–æ–π handle_webhook

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –¥–∏–∞–ª–æ–≥–æ–≤
from bot_dialogs import main_menu, faq, ask_a_lawyer, book_a_consultation
from bot_handlers import start_exit_menu, get_information_and_stat, admin_menu
from bot_middlewares.reg_middleware import DbSessionMiddleware

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
# –ù–∞ Railway –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω—É–∂–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
load_dotenv()

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
# –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ aiohttp –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Railway.
# –ï—Å–ª–∏ PORT –Ω–µ –∑–∞–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–µ–∑ .env), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 8080.
WEBAPP_PORT = int(os.getenv("PORT", 8080))

# –•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ aiohttp. –î–ª—è –¥–µ–ø–ª–æ—è –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '0.0.0.0'
WEBAPP_HOST = "0.0.0.0"

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_HOST (–∏–ª–∏ RAILWAY_PUBLIC_DOMAIN, –µ—Å–ª–∏ –≤—ã –µ–µ —Ç–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏).
# –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway.
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not WEBHOOK_HOST:
    # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ WEBHOOK_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫.
    # –î–ª—è Railway —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ.
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –í–µ–±—Ö—É–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL:
    # BASE_WEBHOOK_URL = f"http://localhost:{WEBAPP_PORT}"
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –¥–µ–ø–ª–æ–µ –Ω–∞ Railway WEBHOOK_HOST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    raise EnvironmentError("WEBHOOK_HOST environment variable is not set. Cannot set up webhook.")

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# ---------- –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í ----------
bot = Bot(
    token=os.getenv('BOT_TOKEN'),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=MemoryStorage())

# ---------- –†–û–£–¢–ï–†–´ ----------
dp.include_router(admin_menu.router)
dp.include_router(start_exit_menu.router)
dp.include_router(get_information_and_stat.router)
dp.include_router(book_a_consultation.appointment_for_a_consultation_dialog)
dp.include_router(main_menu.main_menu_dialog)
dp.include_router(ask_a_lawyer.ask_lawyer_dialog)
dp.include_router(faq.faq_dialog)
setup_dialogs(dp)


# ---------- –°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–î ----------
async def create_pool():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DATABASE_URL, –∫–æ—Ç–æ—Ä—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Railway.
    """
    database_url = os.getenv('DATABASE_URL')

    if not database_url:
        # –ï—Å–ª–∏ DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –Ω–µ–µ),
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DB_*.
        print("–í–Ω–∏–º–∞–Ω–∏–µ: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DB_*.")
        return await asyncpg.create_pool(
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            database=os.getenv('DATABASE')
        )

    # –ü–∞—Ä—Å–∏–º DATABASE_URL, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    parsed_url = urlparse(database_url)

    return await asyncpg.create_pool(
        user=parsed_url.username,
        password=parsed_url.password,
        host=parsed_url.hostname,
        port=parsed_url.port,
        database=parsed_url.path[1:]  # –£–¥–∞–ª—è–µ–º '/' –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    )


# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–ê ----------
async def handle_webhook(request: web.Request):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram.
    """
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram!")
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON-—Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        update = await request.json()
        # print(f"JSON-—Ç–µ–ª–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {update}") # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è HTTP-–æ—Ç–≤–µ—Ç
        # dp.feed_webhook_update - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è aiogram 3.x
        asyncio.create_task(dp.feed_webhook_update(bot, update))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 500 Internal Server Error, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        return web.Response(status=500, text="Internal Server Error")

    # Telegram –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç 200 OK –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å—Ä–∞–∑—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—â–µ –∏–¥–µ—Ç.
    return web.Response(status=200, text="OK")


# ---------- –°–¢–ê–†–¢/–°–¢–û–ü ----------
async def on_startup(app: web.Application):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp.
    –°–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫.
    """
    # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    pool_connect = await create_pool()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∏–¥–ª–≤–∞—Ä—å —Å –ø—É–ª–æ–º
    dp.update.middleware.register(DbSessionMiddleware(pool_connect))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(app: web.Application):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫.
    """
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    print("üõë –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    await dp.storage.close()
    await bot.session.close()
    print("–ü—É–ª –ë–î –∏ —Å–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç—ã.")


# ---------- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ----------
def main():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤.
    """
    app = web.Application()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ WEBHOOK_PATH
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. aiohttp —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º asyncio.
    # WEBAPP_HOST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '0.0.0.0' –¥–ª—è –¥–µ–ø–ª–æ—è, WEBAPP_PORT –±–µ—Ä–µ—Ç—Å—è –∏–∑ env.
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    main()

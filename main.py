import asyncio
import asyncpg
import os
from aiohttp import web
from dotenv import load_dotenv


from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram_dialog import setup_dialogs
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from config import settings
from bot_dialogs import main_menu, faq, ask_a_lawyer, book_a_consultation
from bot_handlers import start_exit_menu, get_information_and_stat, admin_menu
from bot_middlewares.reg_middleware import DbSessionMiddleware

load_dotenv()

async def create_pool():
    return await asyncpg.create_pool(user=settings.db_user,
                                     password=settings.db_password,
                                     host=settings.db_host,
                                     port=settings.db_port,
                                     database=settings.database)

async def main() -> None:
    bot = Bot(
        token=os.getenv('BOT_TOKEN'),
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(admin_menu.router)
    dp.include_router(start_exit_menu.router)
    dp.include_router(get_information_and_stat.router)

    dp.include_router(book_a_consultation.appointment_for_a_consultation_dialog)
    dp.include_router(main_menu.main_menu_dialog)
    dp.include_router(ask_a_lawyer.ask_lawyer_dialog)
    dp.include_router(faq.faq_dialog)

    setup_dialogs(dp)
    pool_connect = await create_pool()
    dp.update.middleware.register(DbSessionMiddleware(pool_connect))

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())


# import asyncio
# import asyncpg
# from aiohttp import web
# from aiogram import Bot, Dispatcher
# from aiogram.enums import ParseMode
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram_dialog import setup_dialogs
# from aiogram.client.default import DefaultBotProperties
#
# from config import settings
# from bot_dialogs import main_menu, faq, ask_a_lawyer, book_a_consultation
# from bot_handlers import start_exit_menu, get_information_and_stat, admin_menu
# from bot_middlewares.reg_middleware import DbSessionMiddleware
#
# # ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
# WEBAPP_HOST = "0.0.0.0"          # —Ö–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ aiohttp
# WEBAPP_PORT = 8080               # –ø–æ—Ä—Ç!
# BASE_WEBHOOK_URL = "https://barristerwebsite-production.up.railway.app/"
# WEBHOOK_PATH = "/webhook"
# WEBHOOK_URL = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
#
# # ---------- –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í ----------
# bot = Bot(
#     token=settings.bot_token.get_secret_value(),
#     default=DefaultBotProperties(parse_mode=ParseMode.HTML),
# )
# dp = Dispatcher(storage=MemoryStorage())
#
#
# # ---------- –†–û–£–¢–ï–†–´ ----------
# dp.include_router(admin_menu.router)
# dp.include_router(start_exit_menu.router)
# dp.include_router(get_information_and_stat.router)
# dp.include_router(book_a_consultation.appointment_for_a_consultation_dialog)
# dp.include_router(main_menu.main_menu_dialog)
# dp.include_router(ask_a_lawyer.ask_lawyer_dialog)
# dp.include_router(faq.faq_dialog)
# setup_dialogs(dp)
#
#
# # ---------- –°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–î ----------
# async def create_pool():
#     return await asyncpg.create_pool(
#         user=settings.db_user,
#         password=settings.db_password,
#         host=settings.db_host,
#         port=settings.db_port,
#         database=settings.database
#     )
#
#
# # ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–ê ----------
# async def handle_webhook(request: web.Request):
#     print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram!")
#     try:
#         update = await request.json()
#         print("JSON-—Ç–µ–ª–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
#
#         # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
#         asyncio.create_task(dp.feed_webhook_update(bot, update))
#
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
#     return web.Response(status=200, text="OK")
#
#
# # ---------- –°–¢–ê–†–¢/–°–¢–û–ü ----------
# async def on_startup(app: web.Application):
#     """
#     –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp.
#     """
#     # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
#     pool_connect = await create_pool()
#     # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∏–¥–ª–≤–∞—Ä—å —Å –ø—É–ª–æ–º
#     dp.update.middleware.register(DbSessionMiddleware(pool_connect))
#
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
#     await bot.set_webhook(WEBHOOK_URL)
#     print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
#
#
# async def on_shutdown(app: web.Application):
#     """
#     –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
#     """
#     # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
#     await bot.delete_webhook()
#     print("üõë –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω")
#
#
# # ---------- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ----------
# def main():
#     """
#     –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
#     """
#     app = web.Application()
#     app.router.add_post(WEBHOOK_PATH, handle_webhook)
#
#     # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
#     app.on_startup.append(on_startup)
#     app.on_shutdown.append(on_shutdown)
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. aiohttp —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º asyncio.
#     web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
#
#
# if __name__ == '__main__':
#     main()
